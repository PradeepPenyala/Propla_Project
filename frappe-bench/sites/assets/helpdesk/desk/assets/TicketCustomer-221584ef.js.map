{"version":3,"file":"TicketCustomer-221584ef.js","sources":["../../../../node_modules/mitt/dist/mitt.mjs","../../../../desk/src/emitter.ts","../../../../desk/src/pages/ticket/TicketComment.vue","../../../../desk/src/pages/ticket/TicketCommunication.vue","../../../../desk/src/pages/ticket/TicketConversation.vue","../../../../desk/src/pages/ticket/TicketCustomerTemplateFields.vue","../../../../desk/src/pages/ticket/TicketFeedback.vue","../../../../desk/src/pages/TicketCustomer.vue"],"sourcesContent":["export default function(n){return{all:n=n||new Map,on:function(t,e){var i=n.get(t);i?i.push(e):n.set(t,[e])},off:function(t,e){var i=n.get(t);i&&(e?i.splice(i.indexOf(e)>>>0,1):n.set(t,[]))},emit:function(t,e){var i=n.get(t);i&&i.slice().map(function(n){n(e)}),(i=n.get(\"*\"))&&i.slice().map(function(n){n(t,e)})}}}\n//# sourceMappingURL=mitt.mjs.map\n","import mitt from \"mitt\";\n\nexport const emitter = mitt();\n","<template>\n  <div class=\"my-4 rounded border bg-cyan-50 p-4\">\n    <div class=\"mb-4 flex items-center justify-between\">\n      <div class=\"flex items-center gap-0.5 text-base\">\n        <UserAvatar v-bind=\"user\" size=\"lg\" expand strong />\n        <Icon icon=\"lucide:dot\" class=\"text-gray-500\" />\n        <Tooltip :text=\"dayjs(date).long()\">\n          <div class=\"text-gray-600\">\n            {{ dayjs.tz(date).fromNow() }}\n          </div>\n        </Tooltip>\n        <Icon v-if=\"isPinned\" icon=\"lucide:dot\" class=\"text-gray-500\" />\n        <Badge v-if=\"isPinned\" label=\"Pinned\" theme=\"blue\" variant=\"outline\" />\n      </div>\n      <div class=\"flex items-center gap-1\">\n        <Badge label=\"Comment\" theme=\"green\" variant=\"outline\" />\n        <Dropdown :options=\"options\">\n          <template #default>\n            <Button theme=\"gray\" variant=\"ghost\">\n              <template #icon>\n                <Icon icon=\"lucide:more-horizontal\" />\n              </template>\n            </Button>\n          </template>\n        </Dropdown>\n      </div>\n    </div>\n    <!-- eslint-disable-next-line vue/no-v-html -->\n    <span class=\"prose-f\" v-html=\"content\"></span>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { toRefs, h, computed } from \"vue\";\nimport { createResource, Badge, Button, Dropdown, Tooltip } from \"frappe-ui\";\nimport { Icon } from \"@iconify/vue\";\nimport { dayjs } from \"@/dayjs\";\nimport { emitter } from \"@/emitter\";\nimport { createToast } from \"@/utils\";\nimport { useAuthStore } from \"@/stores/auth\";\nimport { UserInfo } from \"@/types\";\nimport { UserAvatar } from \"@/components\";\n\ninterface P {\n  content: string;\n  date: string;\n  isPinned: number;\n  name: string;\n  user: UserInfo;\n}\n\nconst props = defineProps<P>();\nconst { content, name, isPinned, user } = toRefs(props);\nconst authStore = useAuthStore();\nconst IconTrash = h(Icon, { icon: \"lucide:trash-2\" });\nconst IconPin = h(Icon, { icon: \"lucide:pin\" });\nconst IconUnpin = h(Icon, { icon: \"lucide:pin-off\" });\nconst options = computed(() =>\n  [\n    {\n      label: isPinned.value ? \"Unpin\" : \"Pin\",\n      icon: isPinned.value ? IconUnpin : IconPin,\n      onClick: () => togglePin.submit(),\n    },\n    {\n      label: \"Delete\",\n      icon: IconTrash,\n      onClick: () => deleteComment.submit(),\n      isHidden: user.value.email !== authStore.userId,\n    },\n  ].filter((i) => !i.isHidden)\n);\n\nconst togglePin = createResource({\n  url: \"frappe.client.set_value\",\n  makeParams: () => ({\n    doctype: \"HD Ticket Comment\",\n    name: name.value,\n    fieldname: \"is_pinned\",\n    value: !isPinned.value,\n  }),\n  onSuccess: () => emitter.emit(\"update:ticket\"),\n});\n\nconst deleteComment = createResource({\n  url: \"frappe.client.delete\",\n  makeParams: () => ({\n    doctype: \"HD Ticket Comment\",\n    name: name.value,\n  }),\n  onSuccess() {\n    emitter.emit(\"update:ticket\");\n    createToast({\n      title: \"Comment deleted\",\n      icon: \"check\",\n      iconClasses: \"text-green-500\",\n    });\n  },\n});\n</script>\n","<template>\n  <div class=\"mx-3 pt-6\">\n    <div class=\"mb-4 flex items-center justify-between text-base\">\n      <div class=\"flex items-center gap-0.5\">\n        <UserAvatar v-bind=\"user\" size=\"lg\" expand strong />\n        <Icon icon=\"lucide:dot\" class=\"text-gray-500\" />\n        <Tooltip :text=\"dayjs(date).long()\">\n          <div class=\"text-gray-600\">\n            {{ dayjs.tz(date).fromNow() }}\n          </div>\n        </Tooltip>\n      </div>\n      <slot name=\"top-right\" v-bind=\"{ message: content }\" />\n    </div>\n    <!-- eslint-disable-next-line vue/no-v-html -->\n    <span class=\"prose-f\" v-html=\"sanitize(content)\"></span>\n    <div class=\"flex flex-wrap gap-2\">\n      <AttachmentItem\n        v-for=\"a in attachments\"\n        :key=\"a.file_url\"\n        :label=\"a.file_name\"\n        :url=\"a.file_url\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { Tooltip } from \"frappe-ui\";\nimport sanitizeHtml from \"sanitize-html\";\nimport { Icon } from \"@iconify/vue\";\nimport { dayjs } from \"@/dayjs\";\nimport { UserInfo } from \"@/types\";\nimport { AttachmentItem, UserAvatar } from \"@/components\";\n\ninterface Attachment {\n  file_name: string;\n  file_url: string;\n}\n\ninterface P {\n  content: string;\n  date: string;\n  user: UserInfo;\n  cc?: string;\n  bcc?: string;\n  attachments?: Attachment[];\n}\n\nwithDefaults(defineProps<P>(), {\n  cc: () => \"\",\n  bcc: () => \"\",\n  attachments: () => [],\n});\n\nfunction sanitize(html: string) {\n  return sanitizeHtml(html, {\n    allowedTags: sanitizeHtml.defaults.allowedTags.concat([\"img\"]),\n  });\n}\n</script>\n","<template>\n  <div class=\"divide-y overflow-auto px-5 pb-32\">\n    <div v-for=\"c in conversation\" :id=\"c.name\" :key=\"c.name\" class=\"mt-4\">\n      <TicketComment\n        v-if=\"c.commented_by\"\n        :name=\"c.name\"\n        :content=\"c.content\"\n        :date=\"c.creation\"\n        :user=\"c.user\"\n        :is-pinned=\"c.is_pinned\"\n      />\n      <TicketCommunication\n        v-else\n        :content=\"c.content\"\n        :date=\"c.creation\"\n        :user=\"c.user\"\n        :sender-image=\"c.sender\"\n        :cc=\"c.cc || ''\"\n        :bcc=\"c.bcc || ''\"\n        :attachments=\"c.attachments\"\n      >\n        <template #top-right=\"d\">\n          <slot name=\"communication-top-right\" v-bind=\"d\" />\n        </template>\n      </TicketCommunication>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, inject, nextTick, watch } from \"vue\";\nimport { useRoute } from \"vue-router\";\nimport { useElementVisibility } from \"@vueuse/core\";\nimport { orderBy } from \"lodash\";\nimport { dayjs } from \"@/dayjs\";\nimport TicketComment from \"./TicketComment.vue\";\nimport TicketCommunication from \"./TicketCommunication.vue\";\nimport { ITicket } from \"./symbols\";\n\ninterface P {\n  focus?: string;\n}\n\nconst props = withDefaults(defineProps<P>(), {\n  focus: \"\",\n});\nconst route = useRoute();\nconst ticket = inject(ITicket);\nconst data = computed(() => ticket.data || {});\nconst communications = computed(() => data.value.communications || []);\nconst comments = computed(() => data.value.comments || []);\nconst conversation = computed(() =>\n  orderBy([...communications.value, ...comments.value], (c) =>\n    dayjs(c.creation)\n  )\n);\n\nfunction scroll(id: string) {\n  const e = document.getElementById(id);\n  if (!useElementVisibility(e).value) {\n    e.scrollIntoView({ behavior: \"smooth\" });\n    e.focus();\n  }\n}\n\nwatch(\n  () => props.focus,\n  (id: string) => scroll(id)\n);\nnextTick(() => {\n  const hash = route.hash.slice(1);\n  const id = hash || conversation.value.slice(-1).pop()?.name;\n  if (id) setTimeout(() => scroll(id), 1000);\n});\n</script>\n","<template>\n  <span class=\"grid grid-cols-1 gap-4 border-b px-5 py-2.5 sm:grid-cols-3\">\n    <div class=\"space-y-1.5\">\n      <span class=\"block text-sm text-gray-700\"> Status </span>\n      <span class=\"block break-words text-base font-medium text-gray-900\">\n        {{ transformStatus(ticket.data.status) }}\n      </span>\n    </div>\n    <div class=\"space-y-1.5\">\n      <span class=\"block text-sm text-gray-700\"> Priority </span>\n      <span class=\"block break-words text-base font-medium text-gray-900\">\n        {{ ticket.data.priority }}\n      </span>\n    </div>\n    <div v-for=\"data in slaData\" :key=\"data.label\" class=\"space-y-1.5\">\n      <Tooltip :text=\"dayjs(data.value).long()\">\n        <span class=\"block text-sm text-gray-700\">{{ data.title }}</span>\n      </Tooltip>\n      <span class=\"block break-words text-base font-medium text-gray-900\">\n        <Badge\n          v-if=\"data.showSla\"\n          :label=\"data.label\"\n          :theme=\"data.theme\"\n          variant=\"outline\"\n        />\n        <span v-else>\n          {{ dayjs.tz(data.value).fromNow() }}\n        </span>\n      </span>\n    </div>\n    <div\n      v-for=\"field in ticket.data.template.fields.filter(\n        (f) => !f.hide_from_customer\n      )\"\n      :key=\"field.fieldname\"\n      class=\"space-y-1.5\"\n    >\n      <span class=\"block text-sm text-gray-700\">\n        {{ field.label }}\n      </span>\n      <span class=\"block break-words text-base font-medium text-gray-900\">\n        {{ ticket.data[field.fieldname] }}\n      </span>\n    </div>\n  </span>\n</template>\n\n<script setup lang=\"ts\">\nimport { inject, computed } from \"vue\";\nimport { ITicket } from \"./symbols\";\nimport { dayjs } from \"@/dayjs\";\n\nconst ticket = inject(ITicket);\n\nconst slaData = computed(() => {\n  const responseSla =\n    ticket.data.first_responded_on &&\n    dayjs(ticket.data.first_responded_on).isBefore(ticket.data.response_by)\n      ? \"Fulfilled\"\n      : \"Failed\";\n\n  //TODO: no resolution date for unclassified tickets, configurable?\n  if (ticket.data.priority === \"Unclassified\") {\n    return [\n      {\n        title: \"Expected First Response\",\n        showSla: ticket.data.first_responded_on,\n        label: responseSla,\n        theme: responseSla === \"Fulfilled\" ? \"green\" : \"red\",\n        value: ticket.data.response_by,\n      },\n    ];\n  }\n\n  const resolutionSla =\n    ticket.data.resolution_date &&\n    dayjs(ticket.data.resolution_date).isBefore(ticket.data.resolution_by)\n      ? \"Fulfilled\"\n      : \"Failed\";\n\n  return [\n    {\n      title: \"Expected First Response\",\n      showSla: ticket.data.first_responded_on,\n      label: responseSla,\n      theme: responseSla === \"Fulfilled\" ? \"green\" : \"red\",\n      value: ticket.data.response_by,\n    },\n    {\n      title: \"Expected Resolution\",\n      showSla: ticket.data.resolution_date,\n      label: resolutionSla,\n      theme: resolutionSla === \"Fulfilled\" ? \"green\" : \"red\",\n      value: ticket.data.resolution_by,\n    },\n  ];\n});\n\nfunction transformStatus(status: string) {\n  switch (status) {\n    case \"Replied\":\n      return \"Awaiting reply\";\n    default:\n      return status;\n  }\n}\n</script>\n","<template>\n  <Dialog\n    :model-value=\"open\"\n    :options=\"{\n      title: 'Rate this ticket',\n      actions: [\n        {\n          disabled: !preset,\n          label: 'Submit',\n          theme: 'gray',\n          variant: 'solid',\n          onClick: () =>\n            setValue.submit({\n              fieldname: {\n                status: 'Closed',\n                feedback: preset,\n                feedback_extra: text,\n              },\n            }),\n        },\n      ],\n    }\"\n    @update:model-value=\"() => $emit('update:open', !open)\"\n  >\n    <template #body-content>\n      <div class=\"space-y-4 text-base text-gray-700\">\n        <div class=\"space-y-2\">\n          <span> Select a rating </span>\n          <span class=\"text-red-500\"> * </span>\n          <StarRating v-model:rating=\"rating\" :static=\"false\" />\n        </div>\n        <div v-if=\"options.data?.length\" class=\"space-y-2\">\n          <span> Pick an option </span>\n          <span class=\"text-red-500\"> * </span>\n          <div class=\"flex flex-wrap gap-2\">\n            <Button\n              v-for=\"o in options.data\"\n              :key=\"o.name\"\n              :label=\"o.label\"\n              :theme=\"preset === o.name ? 'blue' : 'gray'\"\n              variant=\"subtle\"\n              @click=\"preset = o.name\"\n            />\n          </div>\n        </div>\n        <div class=\"space-y-2\">\n          <span> Other </span>\n          <FormControl\n            v-model=\"text\"\n            type=\"textarea\"\n            placeholder=\"Tell us more\"\n          />\n        </div>\n      </div>\n    </template>\n  </Dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { inject, ref, watch } from \"vue\";\nimport { createResource, createListResource } from \"frappe-ui\";\nimport { useError } from \"@/composables/error\";\nimport { StarRating } from \"@/components\";\nimport { ITicket } from \"./symbols\";\n\ninterface P {\n  open: boolean;\n}\n\ninterface E {\n  (event: \"update:open\", open: boolean): void;\n}\n\ndefineProps<P>();\nconst emit = defineEmits<E>();\nconst ticket = inject(ITicket);\nconst rating = ref(0);\nconst text = ref(\"\");\nconst preset = ref(null);\nconst options = createListResource({\n  doctype: \"HD Ticket Feedback Option\",\n  fields: [\"name\", \"label\"],\n  pageLength: 99999,\n  onError: useError(),\n});\nconst setValue = createResource({\n  url: \"frappe.client.set_value\",\n  debounce: 300,\n  makeParams: (params) => {\n    return {\n      doctype: \"HD Ticket\",\n      name: ticket.data.name,\n      fieldname: params.fieldname,\n      value: params.value,\n    };\n  },\n  onSuccess: () => {\n    emit(\"update:open\", false);\n    ticket.reload();\n  },\n  onError: useError(),\n});\nwatch(rating, (r) => {\n  preset.value = null;\n  text.value = \"\";\n  options.update({\n    filters: {\n      rating: r,\n    },\n  });\n  options.reload();\n});\n</script>\n","<template>\n  <div v-if=\"ticket.data\" class=\"flex flex-col\">\n    <TicketBreadcrumbs parent=\"TicketsCustomer\" current=\"TicketCustomer\">\n      <template #right>\n        <Button\n          v-if=\"showReopenButton\"\n          label=\"Reopen\"\n          theme=\"gray\"\n          variant=\"solid\"\n          @click=\"setValue.submit({ fieldname: 'status', value: 'Open' })\"\n        >\n          <template #prefix>\n            <Icon icon=\"lucide:repeat-2\" />\n          </template>\n        </Button>\n        <Button\n          v-if=\"showResolveButton\"\n          label=\"Close\"\n          theme=\"gray\"\n          variant=\"solid\"\n          @click=\"handleClose()\"\n        >\n          <template #prefix>\n            <Icon icon=\"lucide:check\" />\n          </template>\n        </Button>\n      </template>\n    </TicketBreadcrumbs>\n    <TicketCustomerTemplateFields />\n    <TicketConversation class=\"grow\" />\n    <span class=\"m-5\">\n      <TicketTextEditor\n        v-if=\"showEditor\"\n        ref=\"editor\"\n        v-model:attachments=\"attachments\"\n        v-model:content=\"editorContent\"\n        v-model:expand=\"isExpanded\"\n        :placeholder=\"placeholder\"\n        autofocus\n        @clear=\"() => (isExpanded = false)\"\n      >\n        <template #bottom-right>\n          <Button\n            label=\"Send\"\n            theme=\"gray\"\n            variant=\"solid\"\n            :disabled=\"$refs.editor.editor.isEmpty || send.loading\"\n            @click=\"() => send.submit()\"\n          />\n        </template>\n      </TicketTextEditor>\n    </span>\n    <TicketFeedback v-model:open=\"showFeedbackDialog\" />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, provide, ref } from \"vue\";\nimport { createResource, Button } from \"frappe-ui\";\nimport { Icon } from \"@iconify/vue\";\nimport { useError } from \"@/composables/error\";\nimport TicketBreadcrumbs from \"./ticket/TicketBreadcrumbs.vue\";\nimport TicketConversation from \"./ticket/TicketConversation.vue\";\nimport TicketCustomerTemplateFields from \"./ticket/TicketCustomerTemplateFields.vue\";\nimport TicketFeedback from \"./ticket/TicketFeedback.vue\";\nimport TicketTextEditor from \"./ticket/TicketTextEditor.vue\";\nimport { ITicket } from \"./ticket/symbols\";\n\ninterface P {\n  ticketId: string;\n}\n\nconst props = defineProps<P>();\nconst ticket = createResource({\n  url: \"helpdesk.helpdesk.doctype.hd_ticket.api.get_one\",\n  cache: [\"Ticket\", props.ticketId],\n  auto: true,\n  params: {\n    name: props.ticketId,\n  },\n});\nprovide(ITicket, ticket);\nconst editor = ref(null);\nconst placeholder = \"Type a message\";\nconst editorContent = ref(\"\");\nconst attachments = ref([]);\nconst showFeedbackDialog = ref(false);\nconst isExpanded = ref(false);\n\nconst send = createResource({\n  url: \"run_doc_method\",\n  debounce: 300,\n  makeParams: () => ({\n    dt: \"HD Ticket\",\n    dn: props.ticketId,\n    method: \"create_communication_via_contact\",\n    args: {\n      message: editorContent.value,\n      attachments: attachments.value,\n    },\n  }),\n  onSuccess: () => {\n    editor.value.editor.commands.clearContent(true);\n    attachments.value = [];\n    isExpanded.value = false;\n    ticket.reload();\n  },\n});\n\nfunction handleClose() {\n  if (showFeedback.value) {\n    showFeedbackDialog.value = true;\n  } else {\n    setValue.submit({ fieldname: \"status\", value: \"Closed\" });\n  }\n}\n\nconst setValue = createResource({\n  url: \"frappe.client.set_value\",\n  debounce: 300,\n  makeParams: (params) => {\n    return {\n      doctype: \"HD Ticket\",\n      name: props.ticketId,\n      fieldname: params.fieldname,\n      value: params.value,\n    };\n  },\n  onSuccess: () => {\n    showFeedbackDialog.value = false;\n    ticket.reload();\n  },\n  onError: useError(),\n});\n\nconst showReopenButton = computed(\n  () => ticket.data.status === \"Resolved\" && !ticket.data.feedback\n);\nconst showResolveButton = computed(() =>\n  [\"Open\", \"Replied\"].includes(ticket.data.status)\n);\n\nconst showEditor = computed(() =>\n  [\"Open\", \"Replied\", \"Resolved\"].includes(ticket.data.status)\n);\n\nconst showFeedback = computed(() => {\n  return ticket.data?.communications?.some((c) => {\n    if (c.sender !== ticket.data.raised_by) {\n      return true;\n    }\n  });\n});\n</script>\n"],"names":["mitt","n","e","i","emitter","props","__props","content","name","isPinned","user","toRefs","authStore","useAuthStore","IconTrash","h","Icon","IconPin","IconUnpin","options","computed","togglePin","deleteComment","createResource","createToast","sanitize","html","sanitizeHtml","route","useRoute","ticket","inject","ITicket","data","communications","comments","conversation","orderBy","c","dayjs","scroll","id","useElementVisibility","watch","nextTick","slaData","responseSla","resolutionSla","transformStatus","status","emit","__emit","rating","ref","text","preset","createListResource","useError","setValue","params","placeholder","provide","editor","editorContent","attachments","showFeedbackDialog","isExpanded","send","handleClose","showFeedback","showReopenButton","showResolveButton","showEditor"],"mappings":"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","x_google_ignoreList":[0]}