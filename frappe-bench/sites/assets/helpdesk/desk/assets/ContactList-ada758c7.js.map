{"version":3,"file":"ContactList-ada758c7.js","sources":["../../../../desk/src/stores/contact.ts","../../../../desk/src/components/desk/global/NewContactDialog.vue","../../../../desk/src/components/MultiSelect.vue","../../../../desk/src/pages/desk/contact/ContactDialog.vue","../../../../desk/src/pages/desk/contact/ContactList.vue"],"sourcesContent":["import { computed, ComputedRef } from \"vue\";\nimport { defineStore } from \"pinia\";\nimport { createListResource } from \"frappe-ui\";\n\ntype Contact = {\n  name: string;\n  first_name: string;\n  last_name: string;\n  full_name: string;\n  email_id: string;\n};\n\nexport const useContactStore = defineStore(\"contact\", () => {\n  const d__ = createListResource({\n    doctype: \"Contact\",\n    fields: [\"*\"],\n    auto: true,\n    pageLength: 99999,\n  });\n\n  const options: ComputedRef<Array<Contact>> = computed(\n    () => d__.list?.data || []\n  );\n\n  return {\n    options,\n  };\n});\n","<template>\n  <div>\n    <Dialog v-model=\"open\" :options=\"{ title: 'Create New Contact' }\">\n      <template #body-content>\n        <div class=\"space-y-4\">\n          <div\n            v-for=\"field in formFields\"\n            :key=\"field.label\"\n            class=\"flex flex-col gap-1\"\n          >\n            <span class=\"mb-2 block text-sm leading-4 text-gray-700\">\n              {{ field.label }}\n            </span>\n            <Input\n              v-if=\"field.type === 'input'\"\n              v-model=\"state[field.value]\"\n              type=\"text\"\n              @blur=\"field.action\"\n            />\n            <Autocomplete\n              v-else\n              v-model=\"state[field.value]\"\n              :options=\"customerResource.data\"\n              :value=\"state[field.value]\"\n              @update:model-value=\"handleCustomerChange\"\n            />\n            <ErrorMessage :message=\"error[field.error]\" />\n          </div>\n          <div class=\"flex justify-end space-x-2\">\n            <Button\n              label=\"Create\"\n              :loading=\"contactResource.loading\"\n              theme=\"gray\"\n              variant=\"solid\"\n              @click=\"createContact()\"\n            />\n          </div>\n        </div>\n      </template>\n    </Dialog>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed } from \"vue\";\nimport { useContactStore } from \"@/stores/contact\";\n\nimport {\n  Input,\n  Dialog,\n  ErrorMessage,\n  createResource,\n  Autocomplete,\n} from \"frappe-ui\";\nimport zod from \"zod\";\n\nimport { createToast } from \"@/utils\";\nimport { AutoCompleteItem } from \"@/types\";\n\ninterface Props {\n  modelValue: boolean;\n}\n\nconst props = defineProps<Props>();\nconst emit = defineEmits<{\n  (event: \"update:modelValue\", value: boolean): void;\n  (event: \"close\"): void;\n  (event: \"contactCreated\"): void;\n}>();\n\nconst contactStore = useContactStore();\n\nconst state = ref({\n  emailID: \"\",\n  firstName: \"\",\n  lastName: \"\",\n  phone: \"\",\n  selectedCustomer: \"\",\n});\n\nconst error = ref({\n  emailValidationError: \"\",\n  firstNameValidationError: \"\",\n  lastNameValidationError: \"\",\n  phoneValidationError: \"\",\n  customerValidationError: \"\",\n});\n\ninterface FormField {\n  label: string;\n  value: string;\n  error: string;\n  type: string;\n  action?: () => void;\n}\n\nconst formFields: FormField[] = [\n  {\n    label: \"Email Id\",\n    value: \"emailID\",\n    error: \"emailValidationError\",\n    type: \"input\",\n    action: () => validateEmailInput(state.value.emailID),\n  },\n  {\n    label: \"First Name\",\n    value: \"firstName\",\n    error: \"firstNameValidationError\",\n    type: \"input\",\n    action: () => validateFirstName(state.value.firstName),\n  },\n  {\n    label: \"Last Name\",\n    value: \"lastName\",\n    error: \"lastNameValidationError\",\n    type: \"input\",\n  },\n  {\n    label: \"Phone\",\n    value: \"phone\",\n    error: \"phoneValidationError\",\n    type: \"input\",\n    action: () => validatePhone(state.value.phone),\n  },\n  {\n    label: \"Customer\",\n    value: \"selectedCustomer\",\n    error: \"customerValidationError\",\n    type: \"autocomplete\",\n    action: () => validateCustomer(state.value.selectedCustomer),\n  },\n];\n\nconst open = computed({\n  get: () => props.modelValue,\n  set: (val) => {\n    emit(\"update:modelValue\", val);\n    if (!val) {\n      emit(\"close\");\n    }\n  },\n});\n\nconst customerResource = createResource({\n  url: \"helpdesk.extends.client.get_list\",\n  params: {\n    doctype: \"HD Customer\",\n    fields: [\"name\", \"customer_name\"],\n  },\n  transform: (data) => {\n    let allData = data.map((option) => {\n      return {\n        label: option.name,\n        value: option.customer_name,\n      };\n    });\n    return allData;\n  },\n  auto: true,\n});\n\nconst contactResource = createResource({\n  url: \"frappe.client.insert\",\n  onSuccess: () => {\n    state.value = {\n      emailID: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      phone: \"\",\n      selectedCustomer: \"\",\n    };\n    createToast({\n      title: \"Contact Created Successfully \",\n      icon: \"check\",\n      iconClasses: \"text-green-600\",\n    });\n    emit(\"contactCreated\");\n  },\n  onError: (error: Error) => {\n    createToast({\n      title: \"Contact Creation Failed\",\n      message: error.message,\n      icon: \"error\",\n      iconClasses: \"text-red-600\",\n    });\n  },\n});\n\nfunction createContact() {\n  if (validateInputs()) return;\n\n  let doc = {\n    doctype: \"Contact\",\n    first_name: state.value.firstName,\n    last_name: state.value.lastName,\n    email_ids: [{ email_id: state.value.emailID, is_primary: true }],\n    links: [\n      {\n        link_doctype: \"HD Customer\",\n        link_name: state.value.selectedCustomer,\n      },\n    ],\n    phone_nos: [],\n  };\n  if (state.value.phone) {\n    doc.phone_nos = [{ phone: state.value.phone }];\n  }\n\n  contactResource.submit({ doc });\n}\n\nfunction handleCustomerChange(item: AutoCompleteItem) {\n  if (!item) return;\n  state.value.selectedCustomer = item.value;\n}\n\nfunction validateInputs() {\n  let error = validateEmailInput(state.value.emailID);\n  error += validateFirstName(state.value.firstName);\n  error += validatePhone(state.value.phone);\n  error += validateCustomer(state.value.selectedCustomer);\n  return error;\n}\n\nfunction validateEmailInput(value: string) {\n  error.value.emailValidationError = \"\";\n  const success = zod.string().email().safeParse(value).success;\n\n  if (!value) {\n    error.value.emailValidationError = \"Email should not be empty\";\n  } else if (!success) {\n    error.value.emailValidationError = \"Enter a valid email\";\n  } else if (existingContactEmails(contactStore.options).includes(value)) {\n    error.value.emailValidationError = \"Contact with email already exists\";\n  }\n  return error.value.emailValidationError;\n}\n\nfunction validateFirstName(value: string) {\n  error.value.firstNameValidationError = \"\";\n  if (!value || value.trim() === \"\") {\n    error.value.firstNameValidationError = \"First name should not be empty\";\n  }\n  return error.value.firstNameValidationError;\n}\n\nfunction validatePhone(value: string) {\n  error.value.phoneValidationError = \"\";\n  const reg = /[0-9]+/;\n  if (value && (!reg.test(value) || value.length < 10)) {\n    error.value.phoneValidationError = \"Enter a valid phone number\";\n  }\n  return error.value.phoneValidationError;\n}\n\nfunction validateCustomer(value: string) {\n  error.value.customerValidationError = \"\";\n  if (!value || value.trim() === \"\") {\n    error.value.customerValidationError = \"Customer should not be empty\";\n  }\n  return error.value.customerValidationError;\n}\n\nfunction existingContactEmails(contacts) {\n  return contacts.map((contact) => contact.email_id);\n}\n</script>\n\n<style></style>\n","<template>\n  <div class=\"flex flex-wrap gap-2 rounded-lg bg-gray-100 p-2\">\n    <Pill\n      v-for=\"item in items\"\n      :key=\"item.value\"\n      :label=\"item.label\"\n      @click=\"(i) => remove(i)\"\n    />\n\n    <Input\n      v-model=\"input\"\n      class=\"w-full\"\n      :placeholder=\"placeholder\"\n      @keyup.enter=\"add({ label: input, value: input })\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, toRefs } from \"vue\";\nimport { Input } from \"frappe-ui\";\nimport { createToast } from \"@/utils\";\nimport Pill from \"./Pill.vue\";\n\ntype Item = {\n  label: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any;\n};\n\nconst props = defineProps({\n  items: {\n    type: Array<Item>,\n    required: true,\n  },\n  placeholder: {\n    type: String,\n    required: false,\n    default: \"Type...\",\n  },\n  validate: {\n    type: Function,\n    required: false,\n    default: () => false,\n  },\n});\n\nconst emit = defineEmits<{\n  (event: \"update:items\", items: Array<Item>): void;\n}>();\n\nconst { items } = toRefs(props);\nconst input = ref(\"\");\n\nfunction add(item: Item) {\n  const err = props.validate(item);\n\n  if (err) {\n    createToast({\n      title: err,\n      icon: \"x\",\n      iconClasses: \"text-red-500\",\n    });\n\n    return;\n  }\n\n  const res = [...items.value, item];\n  emit(\"update:items\", res);\n  input.value = \"\";\n}\n\nfunction remove(item: Item) {\n  const res = items.value.filter((i) => i.value !== item);\n  emit(\"update:items\", res);\n}\n</script>\n","<template>\n  <Dialog :options=\"options\">\n    <template #body-main>\n      <div class=\"flex flex-col items-center gap-4 p-6\">\n        <div class=\"text-xl font-medium text-gray-900\">\n          {{ contact.doc?.name }}\n        </div>\n        <Avatar\n          size=\"2xl\"\n          :label=\"contact.doc?.name\"\n          :image=\"contact.doc?.image\"\n          class=\"cursor-pointer hover:opacity-80\"\n        />\n        <div class=\"flex gap-2\">\n          <FileUploader\n            :validate-file=\"validateFile\"\n            @success=\"(file:File) => updateImage(file)\"\n          >\n            <template #default=\"{ uploading, openFileSelector }\">\n              <Button\n                :label=\"contact.doc?.image ? 'Change photo' : 'Upload photo'\"\n                :loading=\"uploading\"\n                @click=\"openFileSelector\"\n              />\n            </template>\n          </FileUploader>\n          <Button\n            v-if=\"contact.doc?.image\"\n            label=\"Remove photo\"\n            @click=\"updateImage(null)\"\n          />\n        </div>\n        <div class=\"w-full space-y-2 text-sm text-gray-700\">\n          <div class=\"space-y-1\">\n            <div class=\"text-xs\">Emails</div>\n            <MultiSelect\n              v-model:items=\"emails\"\n              placeholder=\"john.doe@example.com\"\n              :validate=\"validateEmail\"\n            />\n          </div>\n          <div class=\"space-y-1\">\n            <div class=\"text-xs\">Phone Nos</div>\n            <MultiSelect\n              v-model:items=\"phones\"\n              placeholder=\"+91 98765 43210\"\n              :validate=\"validatePhone\"\n            />\n          </div>\n        </div>\n      </div>\n    </template>\n  </Dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, ref } from \"vue\";\nimport type { Ref } from \"vue\";\nimport {\n  createDocumentResource,\n  Avatar,\n  Dialog,\n  FileUploader,\n} from \"frappe-ui\";\nimport zod from \"zod\";\nimport { createToast } from \"@/utils\";\nimport { useError } from \"@/composables/error\";\nimport MultiSelect from \"@/components/MultiSelect.vue\";\nimport { File, AutoCompleteItem } from \"@/types\";\n\ninterface Props {\n  name: {\n    type: string;\n    required: true;\n  };\n}\n\nconst props = defineProps<Props>();\n\nconst emit = defineEmits<{\n  (event: \"contactUpdated\"): void;\n}>();\n\ninterface Email {\n  email_id: string;\n  is_primary?: boolean;\n}\n\ninterface Phone {\n  phone: string;\n  is_primary_phone?: boolean;\n  is_primary_mobile?: boolean;\n}\n\nconst isDirty: Ref<boolean> = ref(false);\n\nconst emails = computed({\n  get() {\n    const emails = contact.doc?.email_ids || [];\n    return emails.map((e: Email) => ({\n      label: e.email_id,\n      value: e.email_id,\n    }));\n  },\n  set(newVal) {\n    if (newVal.length === 0) {\n      createToast({\n        title: \"At least one email is required\",\n        icon: \"x\",\n        iconClasses: \"text-red-600\",\n      });\n      return;\n    }\n    if (newVal.length !== contact.doc.email_ids.length) {\n      isDirty.value = true;\n    }\n    contact.doc.email_ids = newVal.map((email: AutoCompleteItem) => ({\n      email_id: email.value,\n    }));\n  },\n});\n\nconst phones = computed({\n  get() {\n    const phone_nos = contact.doc?.phone_nos || [];\n    return phone_nos.map((e: Phone) => ({\n      label: e.phone,\n      value: e.phone,\n    }));\n  },\n  set(newVal) {\n    if (newVal.length !== contact.doc.phone_nos.length) {\n      isDirty.value = true;\n    }\n    contact.doc.phone_nos = newVal.map((item: AutoCompleteItem) => ({\n      phone: item.value,\n    }));\n  },\n});\n\nconst contact = createDocumentResource({\n  doctype: \"Contact\",\n  name: props.name,\n  cache: [`contact-${props.name}`, props.name],\n  auto: true,\n  setValue: {\n    onSuccess() {\n      emit(\"contactUpdated\");\n    },\n    onError() {\n      useError({ title: \"Error updating contact\" });\n    },\n  },\n});\n\nconst options = computed(() => ({\n  title: contact.doc?.name,\n  actions: [\n    {\n      label: \"Save\",\n      theme: \"gray\",\n      variant: \"solid\",\n      onClick: () => update(),\n    },\n  ],\n}));\n\nfunction update(): void {\n  if (!isDirty.value) {\n    createToast({\n      title: \"No changes to save\",\n      icon: \"x\",\n      iconClasses: \"text-red-600\",\n    });\n    return;\n  }\n  contact.setValue.submit({\n    email_ids: emails.value.map((email: AutoCompleteItem) => ({\n      email_id: email.value,\n      is_primary: email.value === contact.doc.email_id,\n    })),\n    phone_nos: phones.value.map((phoneNum: AutoCompleteItem) => ({\n      phone: phoneNum.value,\n      is_primary_phone: phoneNum.value === contact.doc.phone,\n      is_primary_mobile: phoneNum.value === contact.doc.phone,\n    })),\n  });\n}\n\nfunction updateImage(file: File): void {\n  contact.setValue.submit({\n    image: file?.file_url || null,\n  });\n  isDirty.value = true;\n}\n\nfunction validateEmail(input: AutoCompleteItem): string | void {\n  const success = zod.string().email().safeParse(input.value).success;\n  if (!success) return \"Invalid email\";\n}\n\nfunction validatePhone(input: AutoCompleteItem): string | void {\n  const success = zod\n    .string()\n    .regex(/^\\+[1-9]\\d{1,14}$/)\n    .min(10)\n    .max(15)\n    .safeParse(input.value).success;\n  if (!success) return \"Invalid phone number\";\n}\n\nfunction validateFile(file: File): string | void {\n  let extn = file.name.split(\".\").pop().toLowerCase();\n  if (![\"png\", \"jpg\", \"jpeg\"].includes(extn)) {\n    createToast({\n      title: \"Invalid file type, only PNG and JPG images are allowed\",\n      icon: \"x\",\n      iconClasses: \"text-red-600\",\n    });\n    return \"Invalid file type, only PNG and JPG images are allowed\";\n  }\n}\n</script>\n","<template>\n  <div class=\"flex flex-col\">\n    <PageTitle title=\"Contacts\">\n      <template #right>\n        <Button\n          label=\"New contact\"\n          theme=\"gray\"\n          variant=\"solid\"\n          @click=\"isDialogVisible = !isDialogVisible\"\n        >\n          <template #prefix>\n            <LucidePlus class=\"h-4 w-4\" />\n          </template>\n        </Button>\n      </template>\n    </PageTitle>\n    <ListView\n      :columns=\"columns\"\n      :resource=\"contacts\"\n      class=\"mt-2.5\"\n      doctype=\"Contact\"\n    >\n      <template #name=\"{ data }\">\n        <div class=\"flex items-center gap-2\">\n          <Avatar :label=\"data.name\" :image=\"data.image\" size=\"sm\" />\n          <div class=\"line-clamp-1\">{{ data.name }}</div>\n        </div>\n      </template>\n    </ListView>\n    <NewContactDialog\n      v-model=\"isDialogVisible\"\n      @contact-created=\"handleContactCreated\"\n    />\n    <ContactDialog\n      v-if=\"isContactDialogVisible\"\n      :key=\"selectedContact\"\n      v-model=\"isContactDialogVisible\"\n      :name=\"selectedContact\"\n      @contact-updated=\"handleContactUpdated\"\n    />\n  </div>\n</template>\n<script setup lang=\"ts\">\nimport { ref } from \"vue\";\nimport { usePageMeta, Avatar } from \"frappe-ui\";\nimport { createListManager } from \"@/composables/listManager\";\nimport NewContactDialog from \"@/components/desk/global/NewContactDialog.vue\";\nimport PageTitle from \"@/components/PageTitle.vue\";\nimport { ListView } from \"@/components\";\nimport ContactDialog from \"./ContactDialog.vue\";\nimport { createToast } from \"@/utils\";\nimport { Column } from \"@/types\";\n\nconst isDialogVisible = ref(false);\nconst isContactDialogVisible = ref(false);\nconst selectedContact = ref(null);\n\nconst columns: Column[] = [\n  {\n    label: \"Name\",\n    key: \"name\",\n    width: \"w-80\",\n  },\n  {\n    label: \"Email\",\n    key: \"email_id\",\n    width: \"w-80\",\n  },\n  {\n    label: \"Phone\",\n    key: \"phone\",\n    width: \"w-80\",\n  },\n];\n\nconst contacts = createListManager({\n  doctype: \"Contact\",\n  fields: [\"name\", \"email_id\", \"image\", \"phone\"],\n  auto: true,\n  transform: (data) => {\n    for (const d of data) {\n      d.onClick = () => openContact(d.name);\n    }\n    return data;\n  },\n});\n\nusePageMeta(() => {\n  return {\n    title: \"Contacts\",\n  };\n});\n\nfunction handleContactCreated(): void {\n  isDialogVisible.value = false;\n  contacts.reload();\n}\n\nfunction openContact(id: string): void {\n  selectedContact.value = id;\n  isContactDialogVisible.value = true;\n}\n\nfunction handleContactUpdated(): void {\n  createToast({\n    title: \"Contact updated\",\n    icon: \"check\",\n    iconClasses: \"text-green-500\",\n  });\n  isContactDialogVisible.value = !isContactDialogVisible.value;\n  contacts.reload();\n}\n</script>\n"],"names":["useContactStore","defineStore","d__","createListResource","computed","props","__props","emit","__emit","contactStore","state","ref","error","formFields","validateEmailInput","validateFirstName","validatePhone","validateCustomer","open","val","customerResource","createResource","data","option","contactResource","createToast","error2","createContact","validateInputs","doc","handleCustomerChange","item","value","success","zod","existingContactEmails","contacts","contact","items","toRefs","input","add","err","res","remove","i","isDirty","emails","e","newVal","email","phones","createDocumentResource","options","update","phoneNum","updateImage","file","validateEmail","validateFile","extn","isDialogVisible","isContactDialogVisible","selectedContact","columns","createListManager","d","openContact","usePageMeta","handleContactCreated","id","handleContactUpdated"],"mappings":"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"}