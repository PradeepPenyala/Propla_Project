{"version":3,"file":"AttachmentItem.vue_vue_type_script_setup_true_lang-ae5a880a.js","sources":["../../../../desk/src/components/AttachmentItem.vue"],"sourcesContent":["<template>\n  <span>\n    <a :href=\"isShowable ? null : url\" target=\"_blank\">\n      <Button\n        :label=\"label\"\n        theme=\"gray\"\n        variant=\"outline\"\n        @click=\"toggleDialog()\"\n      >\n        <template #prefix>\n          <component :is=\"getIcon()\" class=\"h-4 w-4\" />\n        </template>\n        <template #suffix>\n          <slot name=\"suffix\" />\n        </template>\n      </Button>\n    </a>\n    <Dialog\n      v-model=\"showDialog\"\n      :options=\"{\n        title: label,\n        size: '4xl',\n      }\"\n    >\n      <template #body-content>\n        <div\n          v-if=\"isText\"\n          class=\"prose prose-sm max-w-none whitespace-pre-wrap\"\n        >\n          {{ content }}\n        </div>\n        <img v-if=\"isImage\" :src=\"url\" class=\"m-auto rounded border\" />\n      </template>\n    </Dialog>\n  </span>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from \"vue\";\nimport { Button, Dialog } from \"frappe-ui\";\nimport { getType as getMime } from \"mime\";\nimport LucideFileType from \"~icons/lucide/file-type\";\nimport LucideFileImage from \"~icons/lucide/file-image\";\nimport LucideFileText from \"~icons/lucide/file-text\";\nimport LucideFileSpreadsheet from \"~icons/lucide/file-spreadsheet\";\nimport LucideFile from \"~icons/lucide/file\";\n\ninterface P {\n  label: string;\n  url?: string;\n}\n\nconst props = withDefaults(defineProps<P>(), {\n  url: null,\n});\n\nconst showDialog = ref(false);\nconst mimeType = getMime(props.label) || \"\";\nconst isImage = mimeType.startsWith(\"image/\");\nconst isPdf = mimeType === \"application/pdf\";\nconst isSpreadsheet = mimeType.includes(\"spreadsheet\");\nconst isText = mimeType === \"text/plain\";\nconst isShowable = props.url && (isText || isImage);\nconst content = ref(\"\");\n\nfunction getIcon() {\n  if (isText) return LucideFileType;\n  else if (isImage) return LucideFileImage;\n  else if (isPdf) return LucideFileText;\n  else if (isSpreadsheet) return LucideFileSpreadsheet;\n  else return LucideFile;\n}\n\nfunction toggleDialog() {\n  if (!isShowable) return;\n  if (isText) {\n    fetch(props.url).then((res) => res.text().then((t) => (content.value = t)));\n  }\n  showDialog.value = !showDialog.value;\n}\n</script>\n"],"names":["props","__props","showDialog","ref","mimeType","getMime","isImage","isPdf","isSpreadsheet","isText","isShowable","content","getIcon","LucideFileType","LucideFileImage","LucideFileText","LucideFileSpreadsheet","LucideFile","toggleDialog","res","t"],"mappings":"g3EAoDA,MAAAA,EAAAC,EAIAC,EAAAC,EAAA,EAAA,EACAC,EAAAC,EAAA,QAAAL,EAAA,KAAA,GAAA,GACAM,EAAAF,EAAA,WAAA,QAAA,EACAG,EAAAH,IAAA,kBACAI,EAAAJ,EAAA,SAAA,aAAA,EACAK,EAAAL,IAAA,aACAM,EAAAV,EAAA,MAAAS,GAAAH,GACAK,EAAAR,EAAA,EAAA,EAEA,SAAAS,GAAA,CACE,OAAAH,EAAYI,EAAOP,EACDQ,EAAOP,EACTQ,EAAOP,EACCQ,EACnBC,EAAO,CAGd,SAAAC,GAAA,CACER,IACAD,GACE,MAAAT,EAAA,GAAA,EAAA,KAAAmB,GAAAA,EAAA,KAAA,EAAA,KAAAC,GAAAT,EAAA,MAAAS,CAAA,CAAA,EAEFlB,EAAA,MAAA,CAAAA,EAAA,MAA+B"}