{"version":3,"file":"CustomerList-35465849.js","sources":["../../../../desk/src/components/desk/global/NewCustomerDialog.vue","../../../../desk/src/pages/desk/customer/CustomerDialog.vue","../../../../desk/src/pages/desk/customer/CustomerList.vue"],"sourcesContent":["<template>\n  <div>\n    <Dialog\n      v-model=\"model\"\n      :options=\"{ title: 'Add New Customer', size: 'sm' }\"\n    >\n      <template #body-content>\n        <div class=\"space-y-4\">\n          <div class=\"space-y-1\">\n            <Input\n              v-model=\"state.customer\"\n              label=\"Customer Name\"\n              type=\"text\"\n              placeholder=\"Tesla Inc.\"\n            />\n          </div>\n          <div class=\"space-y-1\">\n            <Input\n              v-model=\"state.domain\"\n              label=\"Domain\"\n              type=\"text\"\n              placeholder=\"eg: tesla.com, mycompany.com\"\n            />\n          </div>\n          <div class=\"float-right flex space-x-2\">\n            <Button\n              label=\"Add\"\n              theme=\"gray\"\n              variant=\"solid\"\n              @click.prevent=\"addCustomer\"\n            />\n          </div>\n        </div>\n      </template>\n    </Dialog>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { reactive } from \"vue\";\nimport { Input, Dialog, createResource } from \"frappe-ui\";\nimport { createToast } from \"@/utils\";\n\nconst emit = defineEmits([\"customerCreated\"]);\nconst model = defineModel<boolean>();\n\nconst state = reactive({\n  customer: \"\",\n  domain: \"\",\n});\n\nconst customerResource = createResource({\n  url: \"frappe.client.insert\",\n  method: \"POST\",\n  data: {\n    doc: {\n      doctype: \"HD Customer\",\n      customer_name: state.customer,\n      domain: state.domain,\n    },\n  },\n  onSuccess: () => {\n    state.customer = \"\";\n    state.domain = \"\";\n    createToast({\n      title: \"Customer Created Successfully \",\n      icon: \"check\",\n      iconClasses: \"text-green-600\",\n    });\n    emit(\"customerCreated\");\n  },\n  onError: (err) => {\n    createToast({\n      title: err.messages[0],\n      icon: \"x\",\n      iconClasses: \"text-red-600\",\n    });\n  },\n});\n\nfunction addCustomer() {\n  if (!state.customer) {\n    createToast({\n      title: \"Customer Name is required\",\n      icon: \"x\",\n      iconClasses: \"text-red-600\",\n    });\n    return;\n  }\n  customerResource.submit({\n    doc: {\n      doctype: \"HD Customer\",\n      customer_name: state.customer,\n      domain: state.domain,\n    },\n  });\n}\n</script>\n","<template>\n  <Dialog :options=\"options\">\n    <template #body-main>\n      <div class=\"flex flex-col items-center gap-4 p-6\">\n        <div class=\"text-xl font-medium text-gray-900\">\n          {{ customer.doc?.name }}\n        </div>\n        <Avatar\n          size=\"lg\"\n          :label=\"customer.doc?.name\"\n          :image=\"customer.doc?.image\"\n          class=\"cursor-pointer hover:opacity-80\"\n        />\n        <div class=\"flex gap-2\">\n          <FileUploader @success=\"(file) => updateImage(file)\">\n            <template #default=\"{ uploading, openFileSelector }\">\n              <Button\n                :label=\"customer.doc?.image ? 'Change photo' : 'Upload photo'\"\n                :loading=\"uploading\"\n                @click=\"openFileSelector\"\n              />\n            </template>\n          </FileUploader>\n          <Button\n            v-if=\"customer.doc?.image\"\n            label=\"Remove photo\"\n            @click=\"updateImage(null)\"\n          />\n        </div>\n        <form class=\"w-full\" @submit.prevent=\"update\">\n          <Input v-model=\"domain\" label=\"Domain\" placeholder=\"example.com\" />\n        </form>\n      </div>\n    </template>\n  </Dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from \"vue\";\nimport {\n  createDocumentResource,\n  Avatar,\n  Dialog,\n  FileUploader,\n} from \"frappe-ui\";\nimport { createToast } from \"@/utils\";\nimport { useError } from \"@/composables/error\";\n\nconst props = defineProps({\n  name: {\n    type: String,\n    required: true,\n  },\n});\n\nconst emit = defineEmits([\"customer-updated\"]);\n\nconst domain = computed({\n  get() {\n    return customer.doc?.domain;\n  },\n  set(d: string) {\n    customer.doc.domain = d;\n  },\n});\n\nconst customer = createDocumentResource({\n  doctype: \"HD Customer\",\n  name: props.name,\n  auto: true,\n  setValue: {\n    onSuccess() {\n      createToast({\n        title: \"Customer updated\",\n        icon: \"check\",\n        iconClasses: \"text-green-500\",\n      });\n    },\n    onError: useError({ title: \"Error updating customer\" }),\n  },\n});\n\nconst options = computed(() => ({\n  title: customer.doc?.name,\n  actions: [\n    {\n      label: \"Save\",\n      theme: \"gray\",\n      variant: \"solid\",\n      onClick: () => update(),\n    },\n  ],\n}));\n\nasync function update() {\n  await customer.setValue.submit({\n    domain: domain.value,\n  });\n  emit(\"customer-updated\");\n}\n\nfunction updateImage(file) {\n  customer.setValue.submit({\n    image: file?.file_url || null,\n  });\n  emit(\"customer-updated\");\n}\n</script>\n","<template>\n  <div class=\"flex flex-col\">\n    <PageTitle title=\"Customers\">\n      <template #right>\n        <Button\n          label=\"New customer\"\n          theme=\"gray\"\n          variant=\"solid\"\n          @click=\"isDialogVisible = !isDialogVisible\"\n        >\n          <template #prefix>\n            <IconPlus class=\"h-4 w-4\" />\n          </template>\n        </Button>\n      </template>\n    </PageTitle>\n    <ListView\n      :columns=\"columns\"\n      :resource=\"customers\"\n      class=\"mt-2.5\"\n      doctype=\"HD Customer\"\n    >\n      <template #name=\"{ data }\">\n        <div class=\"flex items-center gap-2\">\n          <Avatar :label=\"data.name\" :image=\"data.image\" size=\"sm\" />\n          <div class=\"line-clamp-1\">{{ data.name }}</div>\n        </div>\n      </template>\n    </ListView>\n    <NewCustomerDialog\n      v-model=\"isDialogVisible\"\n      @customer-created=\"handleCustomer\"\n    />\n    <span v-if=\"isCustomerDialogVisible\">\n      <CustomerDialog\n        v-model=\"isCustomerDialogVisible\"\n        :name=\"selectedCustomer\"\n        @customer-updated=\"handleCustomer(true)\"\n      />\n    </span>\n  </div>\n</template>\n<script setup lang=\"ts\">\nimport { ref } from \"vue\";\nimport { usePageMeta, Avatar } from \"frappe-ui\";\nimport { createListManager } from \"@/composables/listManager\";\nimport NewCustomerDialog from \"@/components/desk/global/NewCustomerDialog.vue\";\nimport PageTitle from \"@/components/PageTitle.vue\";\nimport { ListView } from \"@/components\";\nimport CustomerDialog from \"./CustomerDialog.vue\";\nimport IconPlus from \"~icons/lucide/plus\";\n\nconst isDialogVisible = ref(false);\nconst isCustomerDialogVisible = ref(false);\nconst selectedCustomer = ref(null);\n// const emptyMessage = \"No Customers Found\";\nconst columns = [\n  {\n    label: \"Name\",\n    key: \"name\",\n    width: \"w-80\",\n  },\n  {\n    label: \"Domain\",\n    key: \"domain\",\n    width: \"w-80\",\n  },\n];\n\nconst customers = createListManager({\n  doctype: \"HD Customer\",\n  fields: [\"name\", \"image\", \"domain\"],\n  auto: true,\n  transform: (data) => {\n    for (const d of data) {\n      d.onClick = () => openCustomer(d.name);\n    }\n    return data;\n  },\n});\n\nusePageMeta(() => {\n  return {\n    title: \"Customers\",\n  };\n});\n\nfunction openCustomer(id: string) {\n  selectedCustomer.value = id;\n  isCustomerDialogVisible.value = true;\n}\nfunction handleCustomer(updated = false) {\n  updated\n    ? (isCustomerDialogVisible.value = false)\n    : (isDialogVisible.value = false);\n  customers.reload();\n}\n</script>\n"],"names":["emit","__emit","model","_useModel","__props","state","reactive","customerResource","createResource","createToast","err","addCustomer","props","domain","computed","customer","d","createDocumentResource","useError","options","update","updateImage","file","isDialogVisible","ref","isCustomerDialogVisible","selectedCustomer","columns","customers","createListManager","data","openCustomer","usePageMeta","id","handleCustomer","updated"],"mappings":"2iCA2CA,MAAAA,EAAAC,EACAC,EAAAC,EAAAC,EAAA,YAAA,EAEAC,EAAAC,EAAA,CAAuB,SAAA,GACX,OAAA,EACF,CAAA,EAGVC,EAAAC,EAAA,CAAwC,IAAA,uBACjC,OAAA,OACG,KAAA,CACF,IAAA,CACC,QAAA,cACM,cAAAH,EAAA,SACY,OAAAA,EAAA,MACP,CAChB,EACF,UAAA,IAAA,CAEEA,EAAA,SAAA,GACAA,EAAA,OAAA,GACAI,EAAA,CAAY,MAAA,iCACH,KAAA,QACD,YAAA,gBACO,CAAA,EAEfT,EAAA,iBAAA,CAAsB,EACxB,QAAAU,GAAA,CAEED,EAAA,CAAY,MAAAC,EAAA,SAAA,CAAA,EACW,KAAA,IACf,YAAA,cACO,CAAA,CACd,CACH,CAAA,EAGF,SAAAC,GAAA,CACE,GAAA,CAAAN,EAAA,SAAA,CACEI,EAAA,CAAY,MAAA,4BACH,KAAA,IACD,YAAA,cACO,CAAA,EAEf,MAAA,CAEFF,EAAA,OAAA,CAAwB,IAAA,CACjB,QAAA,cACM,cAAAF,EAAA,SACY,OAAAA,EAAA,MACP,CAChB,CAAA,CACD,85BC/CH,MAAAO,EAAAR,EAOAJ,EAAAC,EAEAY,EAAAC,EAAA,CAAwB,KAAA,CAEpB,OAAAC,EAAA,KAAA,MAAqB,EACvB,IAAAC,EAAA,CAEED,EAAA,IAAA,OAAAC,CAAsB,CACxB,CAAA,EAGFD,EAAAE,EAAA,CAAwC,QAAA,cAC7B,KAAAL,EAAA,KACG,KAAA,GACN,SAAA,CACI,WAAA,CAENH,EAAA,CAAY,MAAA,mBACH,KAAA,QACD,YAAA,gBACO,CAAA,CACd,EACH,QAAAS,EAAA,CAAA,MAAA,yBAAA,CAAA,CACsD,CACxD,CAAA,EAGFC,EAAAL,EAAA,KAAA,CAAgC,MAAAC,EAAA,KAAA,KACT,QAAA,CACZ,CACP,MAAA,OACS,MAAA,OACA,QAAA,QACE,QAAA,IAAAK,EAAA,CACa,CACxB,CACF,EAAA,EAGF,eAAAA,GAAA,CACE,MAAAL,EAAA,SAAA,OAAA,CAA+B,OAAAF,EAAA,KACd,CAAA,EAEjBb,EAAA,kBAAA,CAAuB,CAGzB,SAAAqB,EAAAC,EAAA,CACEP,EAAA,SAAA,OAAA,CAAyB,MAAAO,GAAA,UAAA,IACE,CAAA,EAE3BtB,EAAA,kBAAA,CAAuB,67BCrDzB,MAAAuB,EAAAC,EAAA,EAAA,EACAC,EAAAD,EAAA,EAAA,EACAE,EAAAF,EAAA,IAAA,EAEAG,EAAA,CAAgB,CACd,MAAA,OACS,IAAA,OACF,MAAA,MACE,EACT,CACA,MAAA,SACS,IAAA,SACF,MAAA,MACE,CACT,EAGFC,EAAAC,EAAA,CAAoC,QAAA,cACzB,OAAA,CAAA,OAAA,QAAA,QAAA,EACyB,KAAA,GAC5B,UAAAC,GAAA,CAEJ,UAAAd,KAAAc,EACEd,EAAA,QAAA,IAAAe,EAAAf,EAAA,IAAA,EAEF,OAAAc,CAAO,CACT,CAAA,EAGFE,EAAA,KACE,CAAO,MAAA,WACE,EACT,EAGF,SAAAD,EAAAE,EAAA,CACEP,EAAA,MAAAO,EACAR,EAAA,MAAA,EAAgC,CAElC,SAAAS,EAAAC,EAAA,GAAA,CACEA,EAAAV,EAAA,MAAA,GAAAF,EAAA,MAAA,GAGAK,EAAA,OAAA,CAAiB"}